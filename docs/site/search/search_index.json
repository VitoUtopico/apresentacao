{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Infrastructure as Code (IaC)","text":"<p>Modelo de constru\u00e7\u00e3o e gerenciamento de infraestrutura atrav\u00e9s de c\u00f3digo intimamente ligado \u00e0 cultura DevOps que permite o versionamento da infraestrutura, automatiza\u00e7\u00e3o nos deploys, em alguns casos o uso de uma infraestrutura imutavel, e ainda, em muitos casos, possibilidade de uso de comandos, tanto declarativo quanto imperativo</p> Comando imperativo no kubernetesArquivo declarativo no kubernetes <pre><code>$ kubectl run nginx --image nginx:latest -ns bananada --port 80\n</code></pre> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: nxginx\n  namespace: bananada\ntemplate:\n  containers:\n  - name: nginx\n    image: nginx:latest\n    ports:\n    - containerPort: 80  \n</code></pre>"},{"location":"#o-que-e","title":"O que \u00e9","text":"<p>Segundo a Red Hat</p> <p>\"Infrastructure as Code (IaC) is the managing and provisioning of infrastructure through code instead of through manual processes.\"</p>"},{"location":"#onde-usar","title":"Onde usar","text":"<ul> <li>Ambientes de Cloud e On Premises (pode variar de acordo com a ferramenta);</li> <li>Onde for necess\u00e1rio reconstruir uma determinada infra com const\u00e2ncia;</li> <li>Em situa\u00e7\u00f5es de constantes modifica\u00e7\u00f5es de uma infra;</li> <li>Em casos em que se precise configurar todo um parque de m\u00e1quinas em que a configura\u00e7\u00e3o manual possa se tornar algo moroso.</li> </ul>"},{"location":"#porque-utilizar","title":"Porque utilizar","text":"<p>A repeti\u00e7\u00e3o de processos manuais pode levar a exaust\u00e3o que pode levar ao falhas, portanto o processo automatizado evita esse tipo de falha humana, al\u00e9m de liberar o profissional para tarefas que dependam mais de conhecimento e raciocinio do que de tempo investido em um esfor\u00e7o mais \"bruto\"</p>"},{"location":"#como-e-aplicado","title":"Como \u00e9 aplicado","text":"<p>Atrav\u00e9s de ferramentas espec\u00edficas que podem ser mais ou menos especializadas e que atendem diferentes necessidades</p> <p>Exemplos dessas ferramentas:</p> <ul> <li>Ansible;</li> <li>AWS CloudFormation;</li> <li>Chef;</li> <li>Puppet;</li> <li>Saltstack;</li> <li>Terraform;</li> <li>OpenTofu.</li> </ul>"},{"location":"#quem-se-beneficia","title":"Quem se beneficia","text":"<p>Pode variar muito em cada organiza\u00e7\u00e3o, mas aparentemente a tend\u00eancia \u00e9:</p> <ul> <li>Desenvolve<ul> <li>DevOps Engineer</li> <li>Cloud Engineer</li> <li>Platform Engineer</li> <li>SRE</li> </ul> </li> <li>Utiliza<ul> <li>Dev</li> <li>DS</li> <li>DE</li> </ul> </li> </ul>"},{"location":"ferramentas/ansible/","title":"Ansible","text":""},{"location":"ferramentas/ansible/#o-que-e","title":"O que \u00e9","text":"<p>Software de c\u00f3digo aberto, escrito na linguagem Python, criado por Michael DeHaan e vendido \u00e0 Red Hat em 2015.</p> <p>Atualmente existem as vers\u00f5es Communit Ansible e Red Hat Ansible Automation Platform</p>"},{"location":"ferramentas/ansible/#onde-usar","title":"Onde usar","text":"<p>Seja em m\u00e1quinas virtuais, m\u00e1quians f\u00edsicas, provedores de nuvem, etc.</p> <p>Onde se deseja:</p> <ul> <li>Configurar</li> <li>Orquestrar</li> <li>Provisionar</li> </ul>"},{"location":"ferramentas/ansible/#como-e-aplicado","title":"Como \u00e9 aplicado","text":"<ul> <li>\u00c9 executado a partir do seu bin\u00e1rio em linha de comando</li> <li>Utiliza comandos ad hoc e arquivos de manifesto que descrevem o que deve ser feito</li> </ul>"},{"location":"ferramentas/ansible/#estrutura","title":"Estrutura","text":"<ul> <li> <p>Composto de m\u00f3dulos que podem fazer uma execu\u00e7\u00e3o local ou remota</p> </li> <li> <p>Manifestos escritos em yaml</p> </li> </ul>"},{"location":"ferramentas/ansible/#exemplo-da-estrutura","title":"Exemplo da estrutura","text":""},{"location":"ferramentas/ansible/#vars","title":"Vars","text":"<p>Contem vari\u00e1veis, que pode ser utilizadas nom\u00f3dulo em que foi declarada</p> <p>Ex.:</p> <pre><code>TERRAFORM_PROJECT_PATH: ../../../terraform/aws/\nPLAN_FILE: plans\n</code></pre>"},{"location":"ferramentas/ansible/#inventory","title":"Inventory","text":"<p>Descreve as m\u00e1quinas que far\u00e3o parte do projeto</p> <p>Essas m\u00e1quinas podem ser agrupadas de acordo com suas caracter\u00edsticas, \u00e0 escolha do desenvolvedor</p> <p>Ex.:</p> <pre><code>all:\n  children:\n    localhost:\n    kubernetes:\n      children:\n        control_plane:\n          hosts:\n            # control_plane_ips\n            3.94.102.215:\n        nodes:\n          hosts:\n            # node_ips\n            54.198.221.11:\n            52.90.225.205:\n</code></pre>"},{"location":"ferramentas/ansible/#roles","title":"Roles","text":"<p>Contem todas as fazes de instala\u00e7\u00f5es e configura\u00e7\u00f5es</p> <pre><code>---\n- name: Update apt &amp;&amp; upgrade apt\n  apt: \n    upgrade: \"dist\"\n    update_cache: true\n    force_apt_get: true\n    state: \"latest\"\n    force: true\n\n- name: Instalando pacotes comuns\n  apt:\n    state: present\n    name: \"{{ packages }}\"\n\n  vars:\n    packages:\n    - curl\n    - wget\n    - apt-transport-https\n    - ca-certificates\n    - gnupg\n    - lsb-release\n    - python3.10\n\n- name: modprobe overlay\n  modprobe:\n    name: overlay\n    state: present\n\n- name: modprobe br_netfilter\n  modprobe:\n    name: br_netfilter\n    state: present\n\n- name: Inserindo template k8s.conf\n  template:\n    src: k8s.conf.j2\n    dest: /etc/sysctl.d/k8s.conf\n    mode: 0644\n\n- name: \"sysctl\"\n  shell: \"sysctl --system\"\n</code></pre>"},{"location":"ferramentas/ansible/#playbooks","title":"Playbooks","text":"<p>Associa de forma ordenada as tasks que devem ser executadas com cada grupo de hosts.</p> <p>Ex.:</p> <pre><code>- hosts: localhost\n  gather_facts: false\n  roles:\n  - { role: terraform }\n\n- hosts: kubernetes\n  gather_facts: false\n  remote_user: ubuntu\n  become: yes\n  become_user: root\n  roles:\n  - { role: commons }\n  - { role: kubernetes }\n  - { role: containerd }\n\n- hosts: control_plane\n  gather_facts: false\n  remote_user: ubuntu\n  become: yes\n  become_user: root\n  roles:\n  - { role: control_plane }\n\n- hosts: nodes\n  gather_facts: false\n  remote_user: ubuntu\n  become: yes\n  become_user: root\n  roles:\n  - { role: config_nodes }\n\n- hosts: control_plane\n  gather_facts: false\n  remote_user: ubuntu\n  become: no\n  roles:\n  - { role: installs_kubectl }\n</code></pre>"},{"location":"ferramentas/ansible/#uma-vantagem-muito-especifica","title":"Uma Vantagem Muito Espec\u00edfica","text":"<p>N\u00e3o \u00e9 necess\u00e1rio a instala\u00e7\u00e3o de um client nas m\u00e1quinas que ser\u00e3o configuradas por ele, pois se comunica por protocolo SSH</p>"},{"location":"ferramentas/opentofu/","title":"OpenTofu","text":"<p>Em agosto de 2023, a Hashicorp mudou a licen\u00e7a do Terraform, a partir da vers\u00e3o 1.6.0 de MPL v2 para BSL v1.1 o que para muitos \u00e9 algo um tanto ambiguo, com possibilidades at\u00e9 de em algum momento a ferramenta passar a ser paga.</p> <p>A Linux Foundation ap\u00f3s n\u00e3o ser ouvida pela HashiCorp para desfazer a decis\u00e3o da mudan\u00e7a de licen\u00e7a, fez um fork do projeto na \u00faltima vers\u00e3o ainda com a antiga licen\u00e7a e chamou inicialmente de OpenTF, mas depois o nome foi trocado para OpenTofu.</p> <p>Esta ferramenta \u00e9 mantida majoritariamente pela comunidade, com a promessa, inclusive, de se desenvolverem novos recursos, que n\u00e3o o foram anteriormente pela HashiCorp.</p> <p>Existe, neste projeto, uma preocupa\u00e7\u00e3o em manter a compatibilidade com projetos Terraform.</p> <p>Para mais detalhes</p>"},{"location":"ferramentas/terraform/","title":"Terraform","text":""},{"location":"ferramentas/terraform/#o-que-e","title":"O que \u00e9","text":"<p>\u00c9 uma ferramenta criada pela HashiCorp utilizada para automatizar o provisionamento e gerenciamento de recursos de infraestrutura em nuvem</p>"},{"location":"ferramentas/terraform/#onde-usar","title":"Onde usar","text":"<p>Em projetos em que se deseja provisionar recursos em nuvem alem de manter o controle de vers\u00e3o desta infra</p>"},{"location":"ferramentas/terraform/#como-e-aplicado","title":"Como \u00e9 aplicado","text":"<p>\u00c9 utilizado via linha de comando, atravez do bin\u00e1rio \"terraform\", muitas vezes abreviado (utilizando alias) para \"tf\".</p> Comando \"terraform plan -out plans\"Comando \"tfp -out plans\" <p></p> <p></p> <p>Seus manifestos s\u00e3o escritos em HCL para a descri\u00e7\u00e3o dos recursos que se deseja provisionar</p> <p></p>"},{"location":"ferramentas/terraform/#estrutura","title":"Estrutura","text":"<p>Um projeto com terraform geralmente \u00e9 organizado da seguinte maneira:</p> <p></p> <p>Gerados automaticamente:</p> <ul> <li>.terraform</li> <li>.terraform.lock.hcl</li> <li>terraform.tfstate</li> <li>terraform.tfstate.backup</li> </ul> <p>Criados pelo usu\u00e1rio:</p> <ul> <li>Pasta modules</li> <li>output.tf</li> <li>plans</li> <li>provider.tf</li> <li>terrafile.tf</li> <li>variables.tf</li> </ul> <p>Os arquivos autom\u00e1ticos s\u00e3o referentes a metadados, destacando o terraform.tfstate, que armazena todo o gerenciamento de recursos existentes na nuvem.</p> <p>Na pasta \"modules\" \u00e9 onde armazenamos os manifestos hcl</p> <p>O arquivo \"plans\" \u00e9 opcional, mas recomendado. Atrav\u00e9s dele existe uma compara\u00e7\u00e3o entre o tfstate e os manifestos que desejamos aplicar, e ent\u00e3o temos uma vis\u00e3o de recursos novos que ser\u00e3o construidos, do que ser\u00e1 destru\u00eddo e o que ser\u00e1 atualizado. Podemos ger\u00e1-lo atrav\u00e9s do argumento \"-out\" no comando \"terraform plan\"</p> <p>output.tf na ra\u00edz do projeto printa a informa\u00e7\u00e3o desejada durante a execu\u00e7\u00e3o na tela</p>"}]}